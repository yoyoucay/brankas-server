'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');
var PIBLASTER = "/dev/pi-blaster";

var PiServo = function () {
  function PiServo(pin, options) {
    _classCallCheck(this, PiServo);

    options = options || {};
    this.pin = pin;
    this.minPulse = options.minPulse || 0.05;
    this.maxPulse = options.maxPulse || 0.2;
    this.currentDegree = options.currentDegree || 0;
  }

  _createClass(PiServo, [{
    key: 'open',
    value: function open() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.stream = fs.createWriteStream(PIBLASTER);
        _this.stream.on('open', function () {
          return resolve(_this);
        });
        _this.stream.on('error', function () {
          return reject(_this);
        });
      });
    }
  }, {
    key: 'close',
    value: function close() {
      this.stream.end();
    }
  }, {
    key: 'calcPulse',
    value: function calcPulse(degree) {
      return this.minPulse + this.maxPulse * (degree / 180);
    }
  }, {
    key: 'setDegree',
    value: function setDegree(degree) {
      var pulse = this.calcPulse(degree);
      this.currentDegree = degree;
      this.stream.write(this.pin + '=' + pulse + '\n');
    }
  }]);

  return PiServo;
}();

module.exports = PiServo;